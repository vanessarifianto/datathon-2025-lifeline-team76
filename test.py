# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xJ7kDQ7b1gO0Ry2h32SsZVpUJ7LGTGs5
"""

import os
from pathlib import Path
import numpy as np
import pandas as pd
import joblib
from sklearn.model_selection import train_test_split
from sklearn.metrics import balanced_accuracy_score, f1_score
from sklearn.ensemble import RandomForestClassifier
from imblearn.over_sampling import SMOTE
from imblearn.pipeline import Pipeline
import warnings

# utilities
def ensure_dir(p: Path):
    p.parent.mkdir(parents=True, exist_ok=True)
    return p

def align_columns_to_expected(df: pd.DataFrame, expected: list[str]) -> pd.DataFrame:
    """Align columns to match expected features: reorder, fill missing, drop extra."""
    # build case-insensitive rename map
    lower_map = {c.lower(): c for c in df.columns}
    rename_map = {}
    for col in expected:
        if col not in df.columns and col.lower() in lower_map:
            rename_map[lower_map[col.lower()]] = col
    if rename_map:
        df = df.rename(columns=rename_map)

    X = df.reindex(columns=expected, fill_value=0)
    X = X.apply(pd.to_numeric, errors="coerce").fillna(0)
    return X[expected]

def detect_expected_features(clf):
    for attr in ["feature_names_in_", "expected_features"]:
        if hasattr(clf, attr):
            return list(getattr(clf, attr))
    if hasattr(clf, "named_steps"):
        for step in clf.named_steps.values():
            for attr in ["feature_names_in_", "expected_features"]:
                if hasattr(step, attr):
                    return list(getattr(step, attr))
    return None

# main logic
model_path = Path("/content/models/rf_smote_pipeline.joblib")
data_dir = Path("/content/data")
input_csv = data_dir / "new_cases.csv"
output_csv = data_dir / "predictions.csv"

LABEL_MAP = {1: "Normal", 2: "Suspect", 3: "Pathologic"}

# train a quick model if not exist
def train_if_needed():
    if model_path.exists():
        print(f"‚úÖ Found existing model: {model_path}")
        return joblib.load(model_path)

    print("‚öôÔ∏è No model found ‚Äî training quick RF‚ÄìSMOTE pipeline...")
    url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00193/CTG.xls"
    df_raw = pd.read_excel(url, sheet_name="Raw Data")

    FEATURES = [
        "LB","AC","FM","UC","ASTV","mSTV","ALTV","mLTV",
        "DL","DS","DP","Width","Min","Max","Nmax","Nzeros",
        "Mode","Mean","Median","Variance","Tendency"
    ]
    FEATURES = [f for f in FEATURES if f in df_raw.columns]
    target = "NSP" if "NSP" in df_raw.columns else ("CLASS" if "CLASS" in df_raw.columns else None)
    if target is None:
        raise RuntimeError("No target column found in CTG.xls")

    df = df_raw[FEATURES + [target]].dropna()
    X = df[FEATURES].apply(pd.to_numeric, errors="coerce").fillna(0)
    y = df[target].astype(int)

    X_tr, X_te, y_tr, y_te = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y)

    pipe = Pipeline([
        ("smote", SMOTE(random_state=42)),
        ("clf", RandomForestClassifier(n_estimators=300, random_state=42, n_jobs=-1))
    ])
    pipe.fit(X_tr, y_tr)
    setattr(pipe, "expected_features", np.array(X.columns, dtype=object))

    y_pr = pipe.predict(X_te)
    print(f"‚úÖ Model trained | bal_acc={balanced_accuracy_score(y_te,y_pr):.3f} | f1={f1_score(y_te,y_pr,average='macro'):.3f}")

    ensure_dir(model_path)
    joblib.dump(pipe, model_path)
    print(f"üíæ Model saved to {model_path}")

    ensure_dir(input_csv)
    X_te.head(10).to_csv(input_csv, index=False)
    print(f"üßæ Demo input saved to {input_csv}")
    return pipe

# load model
clf = train_if_needed()
expected = detect_expected_features(clf)
if expected is None:
    warnings.warn("Could not detect feature list; using default.")
    expected = [
        "LB","AC","FM","UC","ASTV","mSTV","ALTV","mLTV",
        "DL","DS","DP","Width","Min","Max","Nmax","Nzeros",
        "Mode","Mean","Median","Variance","Tendency"
    ]

# load or create input CSV
if not input_csv.exists():
    pd.DataFrame(columns=expected).to_csv(input_csv, index=False)
    print(f"‚ö†Ô∏è No input found ‚Äî created blank demo at {input_csv}")
df_in = pd.read_csv(input_csv)
X_new = align_columns_to_expected(df_in.copy(), expected)

# predict
pred = clf.predict(X_new)
df_out = df_in.copy()
df_out["prediction"] = pred
df_out["prediction_label"] = df_out["prediction"].map(LABEL_MAP).fillna(df_out["prediction"].astype(str))

ensure_dir(output_csv)
df_out.to_csv(output_csv, index=False)
print(f"üéØ Predictions saved to {output_csv}")

# show first few predictions
print(df_out.head())
